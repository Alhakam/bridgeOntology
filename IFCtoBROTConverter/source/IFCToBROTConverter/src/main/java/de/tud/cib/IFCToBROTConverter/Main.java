package de.tud.cib.IFCToBROTConverter;

import de.tud.cib.IFCToBROTConverter.annotation.AnnotatedIfcEntity;
import de.tud.cib.IFCToBROTConverter.annotation.AnnotationParser;
import de.tud.cib.IFCToBROTConverter.ifcFilter.IfcEntity;
import de.tud.cib.IFCToBROTConverter.ifcFilter.IfcFilter;
import de.tud.cib.IFCToBROTConverter.ontologyConfiguration.IfcBrotOntologyBuilder;
import de.tud.cib.IFCToBROTConverter.ontologyConfiguration.LinkedOntology;
import de.tud.cib.IFCToBROTConverter.ontologyFileTransformation.OntologyModelWriter;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

public class Main {

    public static void main(String[] args) throws Exception {
        String uri= args[0];
        Path inputFile = Paths.get(args[1]);
        String outputPath = args[2];

        IfcBrotOntologyBuilder ifcBrotOntologyBuilder = new IfcBrotOntologyBuilder();
        LinkedOntology linkedOntology = null;

        if (args[1].endsWith(".zip")) {
            AnnotationParser annotationParser = new AnnotationParser();
            ArrayList<AnnotatedIfcEntity> annotatedEntities = annotationParser.parseAnnotationData(inputFile);
            linkedOntology = ifcBrotOntologyBuilder.createBrotOntologyWithAnnotations(annotatedEntities, uri);
            System.out.println("BROT-Ontology successfully generated by annotated items");
        }
        else if (args[1].endsWith(".ifc")) {
            IfcFilter ifcFilter = new IfcFilter(inputFile);
            ArrayList<IfcEntity> ifcEntities = ifcFilter.filterAllTypes();
            linkedOntology = ifcBrotOntologyBuilder.createBrotOntology(ifcEntities, uri);
            System.out.println("BROT-Ontology successfully generated by IFC model");
        }
        else {
            System.out.println("Invalid input file");
            System.exit(0);
        }
        OntologyModelWriter.writeOntology(linkedOntology.getOntology(), outputPath);
    }

}
